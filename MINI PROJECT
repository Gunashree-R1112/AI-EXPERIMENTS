import tkinter as tk
from tkinter import messagebox
import heapq
import time

class Node:
    def __init__(self, position, parent=None, g=0, h=0):
        self.position = position
        self.parent = parent
        self.g = g
        self.h = h
        self.f = g + h

    def __lt__(self, other):
        return self.f < other.f

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star_search(grid, start, goal):
    open_list = []
    heapq.heappush(open_list, Node(start, None, 0, heuristic(start, goal)))
    closed_set = set()
    while open_list:
        current = heapq.heappop(open_list)
        if current.position == goal:
            path = []
            while current:
                path.append(current.position)
                current = current.parent
            return path[::-1]
        closed_set.add(current.position)
        x, y = current.position
        for dx, dy in [(0,1),(1,0),(0,-1),(-1,0)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] != 1:
                new_pos = (nx, ny)
                if new_pos in closed_set:
                    continue
                g_cost = current.g + 1
                h_cost = heuristic(new_pos, goal)
                heapq.heappush(open_list, Node(new_pos, current, g_cost, h_cost))
    return None

class TreasureHuntAI:
    def __init__(self, root):
        self.root = root
        self.root.title("Treasure Hunt AI - Smart Agent Explorer")
        self.rows = 10
        self.cols = 10
        self.cell_size = 50
        self.start = None
        self.goal = None
        self.grid = [[0]*self.cols for _ in range(self.rows)]
        self.buttons = [[None]*self.cols for _ in range(self.rows)]
        self.create_ui()

    def create_ui(self):
        frame = tk.Frame(self.root)
        frame.pack()
        for i in range(self.rows):
            for j in range(self.cols):
                btn = tk.Button(frame, width=4, height=2, bg="white",
                                command=lambda x=i, y=j: self.toggle_cell(x, y))
                btn.grid(row=i, column=j)
                self.buttons[i][j] = btn
        tk.Button(self.root, text="Set Start", command=self.set_start, bg="lightgreen").pack(side=tk.LEFT, padx=10, pady=10)
        tk.Button(self.root, text="Set Treasure", command=self.set_goal, bg="gold").pack(side=tk.LEFT, padx=10, pady=10)
        tk.Button(self.root, text="Run A* Search", command=self.run_search, bg="skyblue").pack(side=tk.LEFT, padx=10, pady=10)
        tk.Button(self.root, text="Reset", command=self.reset_grid, bg="lightgray").pack(side=tk.LEFT, padx=10, pady=10)

    def toggle_cell(self, x, y):
        if self.grid[x][y] == 0:
            self.grid[x][y] = 1
            self.buttons[x][y].config(bg="black")
        else:
            self.grid[x][y] = 0
            self.buttons[x][y].config(bg="white")

    def set_start(self):
        messagebox.showinfo("Set Start", "Click on a cell to set the START position.")
        self.root.bind("<Button-1>", self.get_start_position)

    def set_goal(self):
        messagebox.showinfo("Set Treasure", "Click on a cell to set the TREASURE position.")
        self.root.bind("<Button-1>", self.get_goal_position)

    def get_start_position(self, event):
        widget = event.widget
        for i in range(self.rows):
            for j in range(self.cols):
                if self.buttons[i][j] == widget:
                    if self.start:
                        self.buttons[self.start[0]][self.start[1]].config(bg="white")
                    self.start = (i, j)
                    self.buttons[i][j].config(bg="green")
                    self.root.unbind("<Button-1>")
                    return

    def get_goal_position(self, event):
        widget = event.widget
        for i in range(self.rows):
            for j in range(self.cols):
                if self.buttons[i][j] == widget:
                    if self.goal:
                        self.buttons[self.goal[0]][self.goal[1]].config(bg="white")
                    self.goal = (i, j)
                    self.buttons[i][j].config(bg="yellow")
                    self.root.unbind("<Button-1>")
                    return

    def run_search(self):
        if not self.start or not self.goal:
            messagebox.showwarning("Missing Points", "Please set both START and TREASURE positions.")
            return
        path = a_star_search(self.grid, self.start, self.goal)
        if not path:
            messagebox.showerror("No Path", "No valid path found!")
            return
        for step in path:
            if step != self.start and step != self.goal:
                self.buttons[step[0]][step[1]].config(bg="blue")
                self.root.update()
                time.sleep(0.2)
        messagebox.showinfo("Treasure Found", "Smart Agent reached the Treasure!")

    def reset_grid(self):
        for i in range(self.rows):
            for j in range(self.cols):
                self.grid[i][j] = 0
                self.buttons[i][j].config(bg="white")
        self.start = None
        self.goal = None

if __name__ == "__main__":
    root = tk.Tk()
    app = TreasureHuntAI(root)
    root.mainloop()
